# Generated by Django 2.2.6 on 2021-01-07 06:45

import core.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Nuwroversion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Resultfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_3d', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('filename', models.CharField(max_length=255)),
                ('result_file', models.FileField(unique=True, upload_to=core.models.resultfile_file_path)),
                ('link', models.CharField(max_length=255, null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Experiment')),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Measurement')),
                ('nuwroversion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Nuwroversion')),
            ],
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255)),
                ('artifact', models.FileField(upload_to=core.models.artifact_file_path)),
                ('link', models.CharField(max_length=255, null=True)),
                ('addition_date', models.DateTimeField(auto_now_add=True)),
                ('resultfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artifacts', to='core.Resultfile')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
